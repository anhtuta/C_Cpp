#pragma once

#include <malloc.h>

unsigned char SboxTable[] = {
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

unsigned char SboxTableInv[] = {
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

int indShiftRow[] = {
	0, 5, 10, 15,
	4, 9, 14, 3,
	8, 13, 2, 7,
	12, 1, 6, 11
};

int indShiftRowInv[] = {
	0, 13, 10, 7,
	4, 1, 14, 11,
	8, 5, 2, 15,
	12, 9, 6, 3
};


unsigned char xtime(unsigned char value)
{
	if (value < 0x80)
		return value << 1;
	return (value << 1) ^ 0x1b;
}

unsigned char MulGF(unsigned char value1, unsigned char value2)
{
	unsigned char t = 0;
	while (value2)
	{
		if (value2 & 1)
			t ^= value1;
		value1 = xtime(value1);
		value2 >>= 1;
	}
	return t;
}

void SubBytes(unsigned char* block)
{
	for (short i = 0; i < 16; i++)
	{
		block[i] = SboxTable[block[i]];
	}
}

void InvSubBytes(unsigned char* block)
{
	for (short i = 0; i < 16; i++)
	{
		block[i] = SboxTableInv[block[i]];
	}
}

void ShiftRows(unsigned char* block)
{
	char temp[16];
	for (int i = 0; i < 16; i++)
		temp[i] = block[indShiftRow[i]];

	for (int i = 0; i < 16; i++)
		block[i] = temp[i];
}

void InvShiftRows(unsigned char* block)
{
	char temp[16];
	for (int i = 0; i < 16; i++)
		temp[i] = block[indShiftRowInv[i]];

	for (int i = 0; i < 16; i++)
		block[i] = temp[i];
}

void MixColumns(unsigned char* block)
{
	char temp[4];
	int p1, p2, p3;
	for (int i = 0; i < 16; i+= 4)
	{
		p1 = i + 1;
		p2 = i + 2;
		p3 = i + 3;
		temp[0] = MulGF(block[i], 2) ^ MulGF(block[p1], 3) ^ MulGF(block[p2], 1) ^ MulGF(block[p3], 1);
		temp[1] = MulGF(block[i], 1) ^ MulGF(block[p1], 2) ^ MulGF(block[p2], 3) ^ MulGF(block[p3], 1);
		temp[2] = MulGF(block[i], 1) ^ MulGF(block[p1], 1) ^ MulGF(block[p2], 2) ^ MulGF(block[p3], 3);
		temp[3] = MulGF(block[i], 3) ^ MulGF(block[p1], 1) ^ MulGF(block[p2], 1) ^ MulGF(block[p3], 2);

		block[i] = temp[0];
		block[p1] = temp[1];
		block[p2] = temp[2];
		block[p3] = temp[3];
	}
}

void InvMixColumns(unsigned char* block)
{
	char temp[4];
	int p1, p2, p3;
	for (int i = 0; i < 16; i+= 4)
	{
		p1 = i + 1;
		p2 = i + 2;
		p3 = i + 3;
		temp[0] = MulGF(block[i], 0x0e) ^ MulGF(block[p1], 0x0b) ^ MulGF(block[p2], 0x0d) ^ MulGF(block[p3], 0x09);
		temp[1] = MulGF(block[i], 0x09) ^ MulGF(block[p1], 0x0e) ^ MulGF(block[p2], 0x0b) ^ MulGF(block[p3], 0x0d);
		temp[2] = MulGF(block[i], 0x0d) ^ MulGF(block[p1], 0x09) ^ MulGF(block[p2], 0x0e) ^ MulGF(block[p3], 0x0b);
		temp[3] = MulGF(block[i], 0x0b) ^ MulGF(block[p1], 0x0d) ^ MulGF(block[p2], 0x09) ^ MulGF(block[p3], 0x0e);

		block[i] = temp[0];
		block[p1] = temp[1];
		block[p2] = temp[2];
		block[p3] = temp[3];
	}
}

void AddRowKey(unsigned char* block, unsigned char* key)
{
	for (int i = 0; i < 16; i++)
	{
		block[i] ^= key[i];
	}
}

void KeySchedule(unsigned char* key, unsigned char& Rcon)
{
	int* wordKey = (int*)key;

	// stemp 1:
	key[0] ^= SboxTable[key[13]];
	key[1] ^= SboxTable[key[14]];
	key[2] ^= SboxTable[key[15]];
	key[3] ^= SboxTable[key[12]];

	key[0] ^= Rcon;

	//stemp 2:
	wordKey[1] ^= wordKey[0];
	wordKey[2] ^= wordKey[1];
	wordKey[3] ^= wordKey[2];

	Rcon = xtime(Rcon);
}

void aesEncrypt(unsigned char* block, unsigned char* key)
{
	unsigned char Ekey[16];
	memcpy(Ekey, key, 16);

	unsigned char Rcon = 1;

	// Pre Round
	AddRowKey(block, Ekey);

	// other Round
	for (int i = 0; i < 10; i++)
	{
		// build Round Key
		KeySchedule(Ekey, Rcon);

		// steps of round
		SubBytes(block);

		ShiftRows(block);

		if (i != 9)
			MixColumns(block);

		AddRowKey(block, Ekey);
	}
}

void aesDecrypt(unsigned char* block, unsigned char* key)
{
	unsigned char Ekey[16];
	unsigned char listKey[160];
	unsigned char* Pkey = listKey;
	memcpy(Ekey, key, 16);

	unsigned char Rcon = 1;
	for (int i = 0; i < 10; i++)
	{
		memcpy(Pkey, Ekey, 16);
		KeySchedule(Ekey, Rcon);
		Pkey += 16;
	}
	//EncKeySchedule(Ekey, Rcon);

	// Pre Round
	AddRowKey(block, Ekey);

	// other Round
	for (int i = 0; i < 10; i++)
	{
		Pkey -= 16;
		// steps of round
		InvShiftRows(block);

		InvSubBytes(block);

		AddRowKey(block, Pkey);

		if (i != 9)
			InvMixColumns(block);
	}
}